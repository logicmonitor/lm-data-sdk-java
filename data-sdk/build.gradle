plugins {
    id 'idea'
    id 'java'
    id 'com.logicmonitor.java-conventions'
    id 'org.openapi.generator' version '5.3.1'
    id 'com.diffplug.spotless' version "6.4.0"
    id 'java-library'
    id 'jacoco'
    id 'maven-publish'
    id 'org.cyclonedx.bom' version '1.7.4'
}
apply from: "${rootProject.projectDir}/gradle/spotless.gradle"

/* java client configuration */
task buildApiIngestJavaClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "java"
    inputSpec = "$projectDir/src/main/resources/ingest-api.yaml".toString()
    outputDir = "$buildDir/java-client".toString()

    groupId = "$project.group"
    id = "$project.name-java-client"
    version = "$project.version"

    enablePostProcessFile = true
    skipOverwrite = false
    /* Refer for other configOptions https://openapi-generator.tech/docs/generators/java/ */
    configOptions = [
            java8            : "true",
            dateLibrary      : "java8",
            useBeanValidation: "true"
    ]
}

cyclonedxBom {
    includeConfigs = ["runtimeClasspath"]
    skipConfigs = ["compileClasspath", "testCompileClasspath"]
    destination = file("../../sbom")
    outputName = "bom"
}
/*
task generateCode(type: Copy, dependsOn: ['buildApiIngestJavaClient']) {
    def srcPath = "$buildDir/java-client"
    def targetPath = "$rootDir/docs/java-client"

    copy docs
    from(srcPath + "/docs")
    into(targetPath)
    include('*.md')
}
*/
// code will be generated during compilation
compileJava.dependsOn(buildApiIngestJavaClient)

// attach the generated folder as source for this project
sourceSets {
    main {
        java {
            srcDir "$buildDir/java-client/src/main/java"
        }
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'io.swagger:swagger-annotations:1.6.4'
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.10.0'
    implementation 'io.gsonfire:gson-fire:1.8.5'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'
    implementation 'org.slf4j:slf4j-api:2.0.7'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.2.0'
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    allprojects.each {
        sourceSets it.sourceSets.main
    }
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/org/openapitools/client/**')
        }))
    }
}
test.finalizedBy codeCoverageReport

configurations {
    jar.archiveName ="lm-data-sdk-"+version+".jar"
}

task jarSigner {
    doLast {
        def passwd = System.getenv("PASSWORD")
        def app_alias = System.getenv("ALIAS")
        def pfx_file = System.getenv("FILE")
        def storetype =  System.getenv("STORETYPE")

        def exec_line = "jarsigner -storetype " + storetype + " -keystore " + pfx_file + " -tsa http://timestamp.comodoca.com/?td=sha256 -storepass " +
                passwd + " -keypass "+ passwd + " " + jar.archivePath + " " + app_alias

        def output=exec_line.execute()
        output.waitFor()

        println "Exit value: ${output.exitValue()}"
        println "Output: ${output.text}"
    }
}
jar.finalizedBy(jarSigner)

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'lm-data-sdk'
            artifacts = [jar]
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each { dependency ->
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dependency.group)
                    dependencyNode.appendNode('artifactId', dependency.name)
                    dependencyNode.appendNode('version', dependency.version)
                }
            }
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/logicmonitor/lm-data-sdk-java"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

task copyToLib( type: Copy ) {
    into "$buildDir/extra-libs"
    from configurations.runtimeClasspath
}

jar { dependsOn copyToLib }

description = 'data-sdk'
